{
  "$id": "https://meta-mart.org/schema/entity/services/connections/metadata/metaMartConnection.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MetaMartConnection",
  "description": "MetaMart Connection Config",
  "type": "object",
  "javaType": "org.metamart.schema.services.connections.metadata.MetaMartConnection",
  "definitions": {
    "metamartType": {
      "description": "MetaMart service type",
      "type": "string",
      "enum": ["MetaMart"],
      "default": "MetaMart"
    },
    "extraHeaders": {
      "description": "Additional headers to be sent to the API endpoint.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "authProvider": {
      "javaType": "org.metamart.schema.services.connections.metadata.AuthProvider",
      "description": "MetaMart Server Authentication Provider. Make sure configure same auth providers as the one configured on MetaMart server.",
      "type": "string",
      "enum": [
        "basic",
        "azure",
        "google",
        "okta",
        "auth0",
        "aws-cognito",
        "custom-oidc",
        "ldap",
        "saml",
        "metamart"
      ],
      "default": "basic"
    }
  },
  "properties": {
    "clusterName": {
      "description": "Cluster name to differentiate MetaMart Server instance",
      "type": "string",
      "default": "metamart"
    },
    "type": {
      "description": "Service Type",
      "$ref": "#/definitions/metamartType",
      "default": "MetaMart"
    },
    "hostPort": {
      "description": "MetaMart Server Config. Must include API end point ex: http://localhost:8585/api",
      "type": "string",
      "default": "http://localhost:8585/api"
    },
    "authProvider": {
      "description": "MetaMart Server Authentication Provider.",
      "$ref": "#/definitions/authProvider"
    },
    "verifySSL": {
      "description": "Flag to verify SSL Certificate for MetaMart Server.",
      "$ref": "../../../../security/ssl/verifySSLConfig.json#/definitions/verifySSL",
      "default": "no-ssl"
    },
    "sslConfig": {
      "description": "SSL Configuration for MetaMart Server",
      "$ref": "../../../../security/ssl/verifySSLConfig.json#/definitions/sslConfig"
    },
    "securityConfig": {
      "mask": true,
      "description": "MetaMart Client security configuration.",
      "$ref": "../../../../security/client/metaMartJWTClientConfig.json"
    },
    "secretsManagerProvider": {
      "description": "Secrets Manager Provider for MetaMart Server.",
      "$ref": "./../../../../security/secrets/secretsManagerProvider.json",
      "default": "db"
    },
    "secretsManagerLoader": {
      "description": "Secrets Manager Loader for the Pipeline Service Client.",
      "$ref": "./../../../../security/secrets/secretsManagerClientLoader.json",
      "default": "noop"
    },
    "apiVersion": {
      "description": "MetaMart server API version to use.",
      "type": "string",
      "default": "v1"
    },
    "includeTopics": {
      "description": "Include Topics for Indexing",
      "type": "boolean",
      "default": true
    },
    "includeTables": {
      "description": "Include Tables for Indexing",
      "type": "boolean",
      "default": true
    },
    "includeDashboards": {
      "description": "Include Dashboards for Indexing",
      "type": "boolean",
      "default": true
    },
    "includePipelines": {
      "description": "Include Pipelines for Indexing",
      "type": "boolean",
      "default": true
    },
    "includeMlModels": {
      "description": "Include MlModels for Indexing",
      "type": "boolean",
      "default": true
    },
    "includeUsers": {
      "description": "Include Users for Indexing",
      "type": "boolean",
      "default": true
    },
    "includeTeams": {
      "description": "Include Teams for Indexing",
      "type": "boolean",
      "default": true
    },
    "includeGlossaryTerms": {
      "description": "Include Glossary Terms for Indexing",
      "type": "boolean",
      "default": true
    },
    "includeTags": {
      "description": "Include Tags for Indexing",
      "type": "boolean",
      "default": true
    },
    "includePolicy": {
      "description": "Include Tags for Policy",
      "type": "boolean",
      "default": true
    },
    "includeMessagingServices": {
      "description": "Include Messaging Services for Indexing",
      "type": "boolean",
      "default": true
    },
    "enableVersionValidation": {
      "description": "Validate Metamart Server & Client Version.",
      "type": "boolean",
      "default": true
    },
    "includeDatabaseServices": {
      "description": "Include Database Services for Indexing",
      "type": "boolean",
      "default": true
    },
    "includePipelineServices": {
      "description": "Include Pipeline Services for Indexing",
      "type": "boolean",
      "default": true
    },
    "limitRecords": {
      "description": "Limit the number of records for Indexing.",
      "type": "integer",
      "default": 1000
    },
    "forceEntityOverwriting": {
      "description": "Force the overwriting of any entity during the ingestion.",
      "type": "boolean",
      "default": false
    },
    "storeServiceConnection": {
      "description": "If set to true, when creating a service during the ingestion we will store its Service Connection. Otherwise, the ingestion will create a bare service without connection details.",
      "type": "boolean",
      "default": true
    },
    "elasticsSearch": {
      "description": "Configuration for Sink Component in the MetaMart Ingestion Framework.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of sink component ex: metadata",
          "type": "string"
        },
        "config": {
          "$ref": "../../../../type/basic.json#/definitions/componentConfig"
        }
      },
      "additionalProperties": false,
      "required": ["type"]
    },
    "supportsDataInsightExtraction": {
      "description": "Flag to enable Data Insight Extraction",
      "$ref": "../connectionBasicType.json#/definitions/supportsDataInsightExtraction"
    },
    "supportsElasticSearchReindexingExtraction": {
      "description": "Flag to enable ElasticSearch Reindexing Extraction",
      "$ref": "../connectionBasicType.json#/definitions/supportsElasticSearchReindexingExtraction"
    },
    "extraHeaders": {
      "title": "Extra Headers",
      "$ref": "#/definitions/extraHeaders"
    }
  },
  "additionalProperties": false,
  "required": ["hostPort"]
}
